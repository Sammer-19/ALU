// ALU Module
module alu(
    input [3:0] a,        // 4-bit input a
    input [3:0] b,        // 4-bit input b
    input [2:0] sel,      // 3-bit select signal
    output reg [3:0] result
);

always @(*) begin
    case(sel)
        3'b000: result = a + b;       // Addition
        3'b001: result = a - b;       // Subtraction
        3'b010: result = a & b;       // AND
        3'b011: result = a | b;       // OR
        3'b100: result = ~a;          // NOT of a
        default: result = 4'b0000;    // Default case
    endcase
end

endmodule
`timescale 1ns/1ps

module alu_tb;

reg [3:0] a, b;
reg [2:0] sel;
wire [3:0] result;

// Instantiate ALU
alu uut(
    .a(a),
    .b(b),
    .sel(sel),
    .result(result)
);

initial begin
    // Monitor output
    $monitor("Time=%0t | a=%b b=%b sel=%b result=%b", $time, a, b, sel, result);

    // Test Addition
    a = 4'b0011; b = 4'b0001; sel = 3'b000; #10;
    // Test Subtraction
    a = 4'b0101; b = 4'b0010; sel = 3'b001; #10;
    // Test AND
    a = 4'b1100; b = 4'b1010; sel = 3'b010; #10;
    // Test OR
    a = 4'b1100; b = 4'b1010; sel = 3'b011; #10;
    // Test NOT
    a = 4'b1100; b = 4'b0000; sel = 3'b100; #10;

    $finish;
end

endmodule
